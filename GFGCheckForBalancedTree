//{ Driver Code Starts
//Initial Template for C++


#include <bits/stdc++.h>
using namespace std;


// Tree Node
struct Node {
    int data;
    Node* left;
    Node* right;
};

// Utility function to create a new Tree Node
Node* newNode(int val) {
    Node* temp = new Node;
    temp->data = val;
    temp->left = NULL;
    temp->right = NULL;

    return temp;
}


// Function to Build Tree
Node* buildTree(string str) {
    // Corner Case
    if (str.length() == 0 || str[0] == 'N') return NULL;

    // Creating vector of strings from input
    // string after spliting by space
    vector<string> ip;

    istringstream iss(str);
    for (string str; iss >> str;) ip.push_back(str);

    // Create the root of the tree
    Node* root = newNode(stoi(ip[0]));

    // Push the root to the queue
    queue<Node*> queue;
    queue.push(root);

    // Starting from the second element
    int i = 1;
    while (!queue.empty() && i < ip.size()) {

        // Get and remove the front of the queue
        Node* currNode = queue.front();
        queue.pop();

        // Get the current node's value from the string
        string currVal = ip[i];

        // If the left child is not null
        if (currVal != "N") {

            // Create the left child for the current node
            currNode->left = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->left);
        }

        // For the right child
        i++;
        if (i >= ip.size()) break;
        currVal = ip[i];

        // If the right child is not null
        if (currVal != "N") {

            // Create the right child for the current node
            currNode->right = newNode(stoi(currVal));

            // Push it to the queue
            queue.push(currNode->right);
        }
        i++;
    }

    return root;
}


// } Driver Code Ends
/* A binary tree node structure

struct Node
{
    int data;
    struct Node* left;
    struct Node* right;
    
    Node(int x){
        data = x;
        left = right = NULL;
    }
};
 */

class Solution{
    public:
    //Function to check whether a binary tree is balanced or not.
    int height(Node*root){
        if(root==NULL)
        return 0;
        int left=height(root->left);
        int right=height(root->right);
        int ans=max(left,right)+1;
        return ans;
    }
    bool isBalanced(Node *root)
    {
        //  Your Code here
        //Time Complexity---O(n^2) height takes O(n) and isBalanced calline  height in it sotakes O(n^2);
        if(root==NULL){
            return 1;
        }
        // int leftAns=isBalanced(root->left);
        // int rightAns=isBalanced(root->right);
        // int diff=abs(height(root->left)-height(root->right));
        // if(leftAns==1 && rightAns==1 && diff<=1)
        // return 1;
        // else 
        // return 0;
        
        
        //Fast Approach TimeComplexity-O(n)
        pair<int,int>res=superFastBalance(root);
        return res.first;
    }
    pair<int,int> superFastBalance(Node*root){
        if(root==NULL){
        pair<int,int>p=make_pair(1,0);
        return p;
        }        
        pair<int,int>leftAns=superFastBalance(root->left);
        pair<int,int>rightAns=superFastBalance(root->right);
        int op1=leftAns.first;
        int op2=rightAns.first;
        int op3=abs(leftAns.second-rightAns.second);
        int heightMax=max(leftAns.second,rightAns.second)+1;
        pair<int,int>ans;
        if(op1==1 && op2==1 && op3<=1){
        ans.first=1;
        }
        else{
          ans.first=0;
        }
        ans.second=heightMax;
        return ans;
    }
};


//{ Driver Code Starts.

/* Driver program to test size function*/

  

int main() {

   
    int t;
    scanf("%d ", &t);
    while (t--) {
        string s, ch;
        getline(cin, s);
        
        Node* root = buildTree(s);
        Solution ob;
        cout << ob.isBalanced(root) << endl;
    }
    return 0;
}

// } Driver Code Ends
