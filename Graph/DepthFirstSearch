void prepareAdjList(vector<vector<int>> &edges,unordered_map<int,vector<int>> &adj){
    for(int i=0;i<edges.size();i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
}
void dfs(int node ,unordered_map<int,vector<int>>&adj,vector<int>&component,unordered_map<int,bool>&visited){
    component.push_back(node);
    visited[node]=true;
    for(auto j:adj[node]){
      if (!visited[j]) {
        dfs(j, adj, component, visited);
      }
    }
}
vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    // Write your code here
    //prepreAdjList
    unordered_map<int,vector<int>>adj;
    prepareAdjList(edges,adj);
    
    unordered_map<int,bool>visited;
    vector<vector<int>>ans;
    //Checkin g for disconnected vertex;
    for(int i=0;i<V;i++){
        if(!visited[i]){
        vector<int>component;
        dfs(i,adj,component,visited);
        ans.push_back(component);
        }
    }
    return ans;
}
