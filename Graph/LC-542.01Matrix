class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        int n=mat.size();
        int m=mat[0].size();
        int dir[][2]={{-1,0},{1,0},{0,1},{0,-1}};
        queue<pair<int,int>>q;
        vector<vector<int>>updatedMat(n,vector<int>(m,0)); 
         vector<vector<int>>visited(n,vector<int>(m,0)); 
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==0){
                    updatedMat[i][j]=0;
                    q.push(make_pair(i,j));
                    visited[i][j]=1;
                }

            }
        } 
        while(!q.empty()){
            pair<int,int>p=q.front();
            q.pop();
            int x=p.first;
            int y=p.second;
            for(int i=0;i<4;i++){
                int newX=x+dir[i][0];
                int newY=y+dir[i][1];
                if(newX >= 0 && newX < n && newY >= 0 && newY < m && visited[newX][newY] == 0){
                    q.push(make_pair(newX,newY));
                    visited[newX][newY]=1;
                    updatedMat[newX][newY] = updatedMat[x][y] + 1;
                }
            }
        }
        return updatedMat;
    }
};
