class Solution {
public:
    bool validateBinaryTreeNodes(int n, vector<int>& leftChild, vector<int>& rightChild) {
        unordered_map<int,vector<int>>adjList;
        vector<int>inorder(n,0);
        for(int i=0;i<n;i++){
            int left=leftChild[i];
            int right=rightChild[i];
            if(left!=-1){
                adjList[i].push_back(left);
                inorder[left]++;
            }
            if(right!=-1){
                adjList[i].push_back(right);
                inorder[right]++;
            }
        }
        //Check for root candidate
        vector<int> root_candidates;
        for (int node = 0; node < n; ++node) {
            if (inorder[node] == 0) {
                root_candidates.push_back(node);
            }
        }

        if (root_candidates.size() != 1) {
            return false;
        }
        int root = root_candidates[0];

        //BFS
        queue<int> q;
        set<int> sett;
        q.push(root);
        sett.insert(root);

        while (!q.empty()) {
            int node = q.front();
            q.pop();
            if (adjList.find(node) != adjList.end()) {
                for (int child : adjList[node]) {
                    if (sett.find(child) != sett.end()) {
                        return false;
                    }
                    sett.insert(child);
                    q.push(child);
                }
            }
        }

        return sett.size() == n;
    }
};
