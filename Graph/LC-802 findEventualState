
class Solution {
public:
    bool checkDfs(int V,vector<vector<int>>& adj,vector<int>&visited,vector<int>&pathvisited,int node,vector<int>&check){
        visited[node]=1;
        pathvisited[node]=1;
        check[node]=0;
        for(auto k:adj[node]){
           if(!visited[k]){
               if(checkDfs(V,adj,visited,pathvisited,k,check)==true)
               return true;
           }
           else if (pathvisited[k])
           return true;
        }
        pathvisited[node]=0;
        check[node]=1;
        return false;
    }
    vector<int> eventualSafeNodes(vector<vector<int>>& adj) {
        int V=adj.size();
         
        vector<int>visited(V,0);
        vector<int> pathvisited(V,0);
        vector<int>check(V,0);
         vector<int>safeNodes;
        for(int i=0;i<V;i++){
            if(!visited[i]){
                checkDfs(V,adj,visited,pathvisited,i,check);
            }            
        }
        for(int j=0;j<V;j++){
            if(check[j]==1){
                safeNodes.push_back(j);
            }
            
        }
        return safeNodes;
        
    }
};
