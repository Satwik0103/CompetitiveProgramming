// class Solution {
// public:
//     int numSubarraysWithSum(vector<int>& nums, int goal) {
//         int count=0;
//         int currSum=0;
//         int i=0;
//         while(goal==0&&i<nums.size()){
//             currSum+=nums[i];
//             if(currSum==goal){
//             count++;
//             }
//             i++;
//         }
        
//         while(currSum!=goal && i<nums.size()){
//             currSum+=nums[i];
//             count++;
//             i++;
//         }
//         if(currSum!=goal)
//         return 0;
//         for(int k=i;k<nums.size();k++){
//             currSum+=nums[k]-nums[k-i];
//             if(currSum==goal){
//                 count++;
//             }
//         }
//         return count;
        
//     }
// };
class Solution {
public:
    int numSubarraysWithSum(vector<int>& nums, int goal) {
        // atmost sum (goal) - atmost sum (goal-1) == exact sum (goal)
        return fun(nums,goal)-fun(nums,goal-1);
    }
    int fun(vector<int>& nums,int goal)// atmost sum is goal
    {
        int res=0;
        int sum=0;
        int j=0;
        for(int i=0;i<nums.size();i++)
        {
            sum+=nums[i];
            while(sum>goal && j<nums.size())
            {
                sum-=nums[j++];
            }
            if(i>=j)
            res+=i-j+1;
        }
        return res;
    }
};
