/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
pair<int,int>solveTree(TreeNode* root){
    if(root==NULL){
        pair<int,int>p=make_pair(0,0);
        return p;
    }
    pair<int,int> leftAns=solveTree(root->left);
    pair<int,int> rightAns=solveTree(root->right);
    pair<int,int>ans;
    // return {
    //              left.first  + right.first + root->val ,
    //              left.second + right.second + 
    //              abs(left.first - right.first)
    //            };
    ans.second=leftAns.second+rightAns.second+abs(leftAns.first-rightAns.first);
    ans.first = leftAns.first+rightAns.first+root->val;
    return ans;

}
    int findTilt(TreeNode* root) {
        return solveTree(root).second;
    }
};
