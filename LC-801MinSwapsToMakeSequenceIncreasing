class Solution {
public:
int solveRec(vector<int>& nums1, vector<int>& nums2,int index,bool swaped){
    if(index == nums1.size()){
     return 0;
}
    int ans=INT_MAX;
   
    int prev1=nums1[index-1];
    int prev2=nums2[index-1];
    if(swaped){
            swap(prev1,prev2);
    }
    if(nums1[index]>prev1 && nums2[index]>prev2)
        ans=solveRec(nums1,nums2,index+1,0);
    if(nums1[index]>prev2 && nums2[index]>prev1){
        ans=min(ans,1+solveRec(nums1,nums2,index+1,1));
    }
    cout<<ans<<endl;
    return ans;
}
int solveMem(vector<int>& nums1, vector<int>& nums2,int index,bool swaped,vector<vector<int>>&dp){
    if(index == nums1.size()){
     return 0;
}
 if(dp[index][swaped]!=-1)
    return dp[index][swaped];

    int ans=INT_MAX;
   
    int prev1=nums1[index-1];
    int prev2=nums2[index-1];
    if(swaped){
            swap(prev1,prev2);
    }
   
    if(nums1[index]>prev1 && nums2[index]>prev2){
        ans=solveMem(nums1,nums2,index+1,0,dp);
    }
     if(nums1[index]>prev2 && nums2[index]>prev1){
        ans=min(ans,1+solveMem(nums1,nums2,index+1,1,dp));
    }
    dp[index][swaped]=ans;
    return ans;
}
int solveTab(vector<int>& nums1, vector<int>& nums2){
    int n=nums1.size();
    vector<vector<int>> dp(nums1.size()+1,vector<int>(2,0));
    for(int index=n-1;index>=1;index--){
        for(int swapped=1;swapped>=0;swapped--){
        int ans=INT_MAX; 
        int prev1=nums1[index-1];
        int prev2=nums2[index-1];
        if(swapped){
            swap(prev1,prev2);
        }
        if(nums1[index]>prev1 && nums2[index]>prev2)
            ans=dp[index+1][0];
        if(nums1[index]>prev2 && nums2[index]>prev1){
            ans=min(ans,1+dp[index+1][1]);
        }
    dp[index][swapped]=ans;
    }
    }
    return dp[1][0];
}
int solveSpaceOpt(vector<int>& nums1, vector<int>& nums2){
    int n=nums1.size();
    vector<vector<int>> dp(nums1.size()+1,vector<int>(2,0));
    int swap=0;//Swapped=1
    int noSwap=0;//swapped=0
    int currswap=0;
    int currnoswap=0;
    for(int index=n-1;index>=1;index--){
        for(int swapped=1;swapped>=0;swapped--){
        int ans=INT_MAX; 
        int prev1=nums1[index-1];
        int prev2=nums2[index-1];
        if(swapped){
           int t=prev1;
           prev1=prev2;
           prev2=t;
        }
        if(nums1[index]>prev1 && nums2[index]>prev2)
            ans=noSwap;
        if(nums1[index]>prev2 && nums2[index]>prev1){
            ans=min(ans,1+swap);
        }
        if(swapped)
        currswap=ans;
        else
        currnoswap=ans;
    }
    swap=currswap;
    noSwap=currnoswap;
    }
    return min(swap,noSwap);
}
    int minSwap(vector<int>& nums1, vector<int>& nums2) {
        nums1.insert(nums1.begin(),-1);
        nums2.insert(nums2.begin(),-1);
        bool swaped=0;
       // int ans=solveRec(nums1,nums2,1,swaped);
        vector<vector<int>> dp(nums1.size()+1,vector<int>(2,-1));
        //int ans=solveMem(nums1,nums2,1,swaped,dp);
        //int ans=solveTab(nums1,nums2);
        int ans=solveSpaceOpt(nums1,nums2);
        return ans;
    }
};
