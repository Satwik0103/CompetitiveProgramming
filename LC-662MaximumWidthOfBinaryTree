/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        int maxWidth=0;
        if(root==NULL)
        return 0;
        queue<pair<TreeNode*,int>>q;
        q.push({root,0});
        while(!q.empty()){
            int sizes=q.size();
            int startIndex=q.front().second;
            int endIndex=q.back().second;
            maxWidth=max(maxWidth,endIndex-startIndex+1);
            for(int i=0;i<sizes;i++){
                auto nodeTemp=q.front();
                TreeNode*temp=q.front().first;
                int nodeIndex = nodeTemp.second - startIndex;
                q.pop();
                if(temp->left!=NULL)
                q.push({temp->left,2LL*nodeIndex+1});//2n+1
                if(temp->right!=NULL)
                q.push({temp->right,2LL*nodeIndex+2});//2n+2
            }

        }
        return maxWidth;
        
    }
};
