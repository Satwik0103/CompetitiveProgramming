class Solution {
public:
int solveRec(int n){
    int ans=0;
    if(n==1)
    return 1;
    if(n==2)
    return 2;
    
    ans+=solveRec(n-1);
    ans+=solveRec(n-2);
    return ans;

}
int solveMem(int n,vector<int>&dp){
    int ans=0;
    if(n==1)
    return 1;
    if(n==2)
    return 2;
    if(dp[n]!=-1)
    return dp[n];
    
    ans+=solveMem(n-1,dp);
    ans+=solveMem(n-2,dp);
    return dp[n]=ans;

}
int solveTab(int n){
    vector<int>dp(n+2,0);
 
   dp[1]=1;
   dp[2]=2;
   for(int i=3;i<=n;i++){
    int ans=0;
    ans+=dp[i-1];
    ans+=dp[i-2];
    dp[i]=ans;
   }
   
    return dp[n];

}
int solveSpaceOpt(int n){
    if(n==1)
    return 1;
    int prev1=2;
    int prev2=1;
   for(int i=3;i<=n;i++){
    int ans=0;
    ans+=prev1;
    ans+=prev2;
    prev2=prev1;
    prev1=ans;
   }
   
    return prev1;

}
    int climbStairs(int n) {
      //  return solveRec(n);
    //   vector<int>dp(n+1,-1);
    //     return solveMem(n,dp);
   // return solveTab(n);
   return solveSpaceOpt(n);
    }
};
