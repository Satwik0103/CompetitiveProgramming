//Optimized Code
class Solution {
public:
    int garbageCollection(std::vector<std::string>& garbage, std::vector<int>& travel) {
        int res = 0;

        for (const string& g : garbage) {
            res += g.length();
        }

        bool m = false, p = false, g = false;

        for (int i = travel.size(); i > 0; i--) {
            m = m || garbage[i].find("M") != string::npos;
            p = p || garbage[i].find("P") != string::npos;
            g = g || garbage[i].find("G") != string::npos;

            res += travel[i-1] * ((m ? 1 : 0) + (p ? 1 : 0) + (g ? 1 : 0));
        }

        return res;
    }
};

//My Code

class Solution {
public:
    int garbageCollection(vector<string>& garbage, vector<int>& travel) {
        vector<char>trucks={'G','P','M'};
        int ans=0;
        
        for(int k=0;k<3;k++){
            int road=0;
            for(int i=0;i<garbage.size();i++){
                int cnt=0;
                for(int j=0;j<garbage[i].length();j++){
                    if(garbage[i][j]==trucks[k]){
                        ans+=1;
                        cnt=1;
                    }
                }
                if(i!=0 && i<=travel.size()){
                    road=road+travel[i-1];   
                }
                if(i!=0 &&cnt==1){
                    ans=ans+road;
                    road=0;
                }
            }
        }
        return ans;
    }
};
