class Solution {
public:
    int solveRec(int index,int endPoint,int n,vector<int>& slices){
        if(n==0||index>endPoint)
        return 0;
        int take=slices[index]+solveRec(index+2,endPoint,n-1,slices);
        int nottake=0+solveRec(index+1,endPoint,n,slices);
        int ans=max(take,nottake);
        return ans;

    }
     int solveMem(int index,int endPoint,int n,vector<int>& slices,             vector<vector<int>>&dp){
        if(n==0||index>endPoint)
        return 0;
        if(dp[index][n]!=-1)
        return dp[index][n];
        int take=slices[index]+solveMem(index+2,endPoint,n-1,slices,dp);
        int nottake=0+solveMem(index+1,endPoint,n,slices,dp);
        int ans=max(take,nottake);
        dp[index][n]=ans;
        return ans;

    }
    int solveTab(vector<int>& slices){
        int n=slices.size();
        vector<vector<int>>dp1(n+2,vector<int>(n+2,0));
        vector<vector<int>>dp2(n+2,vector<int>(n+2,0));
        for(int index=n-2;index>=0;index--){
            for(int k=1;k<=n/3;k++){
                int take=slices[index]+dp1[index+2][k-1];
                int nottake=0+dp1[index+1][k];
                dp1[index][k]=max(take,nottake);
            }
        }
        int ans1=dp1[0][n/3];
        for(int index=n-1;index>=1;index--){
              for(int k=1;k<=n/3;k++){
                int take=slices[index]+dp2[index+2][k-1];
                int nottake=0+dp2[index+1][k];
                dp2[index][k]=max(take,nottake);
            }
        }
        int ans2=dp2[1][n/3];
        return max(ans1,ans2);
    }
    int solveSpaceOpt(vector<int>& slices){
        int n=slices.size();

        vector<int>prev1(n+2,0);
        vector<int>curr1(n+2,0);
        vector<int>next1(n+2,0);

        vector<int>prev2(n+2,0);
        vector<int>curr2(n+2,0);
        vector<int>next2(n+2,0);

        for(int index=n-2;index>=0;index--){
            for(int k=1;k<=n/3;k++){
                int take=slices[index]+next1[k-1];
                int nottake=0+curr1[k];
                prev1[k]=max(take,nottake);
            }
            next1=curr1;
            curr1=prev1;
        }
        int ans1=curr1[n/3];
        for(int index=n-1;index>=1;index--){
              for(int k=1;k<=n/3;k++){
                int take=slices[index]+next2[k-1];
                int nottake=0+curr2[k];
                prev2[k]=max(take,nottake);
            }
            next2=curr2;
            curr2=prev2;
        }
       

        int ans2=curr2[n/3];
        return max(ans1,ans2);
    }
    
    int maxSizeSlices(vector<int>& slices) {
        // int n=slices.size();
        // int ans1=solveRec(0,n-2,n/3,slices);
        // int ans2=solveRec(1,n-1,n/3,slices);
        // return max(ans1,ans2);

        // int n=slices.size();
        // vector<vector<int>>dp1 (n+2,vector<int>(n+2,-1));
        //  int ans1=solveMem(0,n-2,n/3,slices,dp1);
        // vector<vector<int>>dp2 (n+2,vector<int>(n+2,-1));
        // int ans2=solveMem(1,n-1,n/3,slices,dp2);
        // return max(ans1,ans2);

        //int ans=solveTab(slices);

        int ans=solveSpaceOpt(slices);
        return ans;
    }
};
