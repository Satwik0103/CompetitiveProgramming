class NestedIterator {
public:
    NestedIterator(vector<NestedInteger> &nestedList) {
        flatten(nestedList);
        currentIndex = 0;
    }

    int next() {
        return flattened[currentIndex++];
    }

    bool hasNext() {
        return currentIndex < flattened.size();
    }

private:
    vector<int> flattened;
    int currentIndex;

    void flatten(const vector<NestedInteger>& nestedList) {
        for (const auto& item : nestedList) {
            if (item.isInteger()) {
                flattened.push_back(item.getInteger());
            } else {
                flatten(item.getList());
            }
        }
    }
};

//Javascript
function flattenList(nestedList) {
    const flattenedList = [];

    function flatten(nestedItem) {
        if (Array.isArray(nestedItem)) {
            for (const item of nestedItem) {
                flatten(item);
            }
        } else {
            flattenedList.push(nestedItem);
        }
    }

    flatten(nestedList);
    return flattenedList;
}

const nestedList = [1, [2, 3], [4, [5, 6]]];
const flattenedList = flattenList(nestedList);
console.log(flattenedList); // Output: [1, 2, 3, 4, 5, 6]
