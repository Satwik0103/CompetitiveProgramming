/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
// class Solution {
// public:
//     ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
//         ListNode* tail=new ListNode();
//         ListNode*l3=tail;
//         // if(l1==NULL)
//         // return NULL;
//         // if(l2==NULL)
//         // return NULL;
//         int c=0;
//         while(l1!=NULL && l2!=NULL){
//             int values=l1->val+l2->val+c;
//             if(values>9){
//                 c=1;
//                 values=values%10;
//             }
//             else{
//                 c=0;
//             }
//             cout<<values;
//             l3->next=new ListNode(values);
//             l3=l3->next;
//             l2=l2->next;
//             l1=l1->next;
//         }
//         while(l1!=NULL){
//             int values=l1->val+c;
//               if(values>9){
//                 c=1;
//                 values=values%10;
//             }
//             else{
//                 c=0;
//             }
//               cout<<values;
//             l3->next=new ListNode(values);
//             l3=l3->next;
//             l1=l1->next;
//         }
//          while(l2!=NULL){
//             int values=l2->val+c;
//               if(values>9){
//                 c=1;
//                 values=values%10;
//             }
//             else{
//                 c=0;
//             }
//               cout<<values;
//             l3->next=new ListNode(values);
//             l3=l3->next;
//             l2=l2->next;
//         }
//         if(c==1)
//         l3->next=new ListNode(c);

//         return tail->next;
//     }
// };
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* l3 = new ListNode();
        ListNode* current = l3;
        int carry = 0;
        while (l1 != nullptr || l2 != nullptr) {
            int val1 = (l1 != nullptr) ? l1->val : 0;
            int val2 = (l2 != nullptr) ? l2->val : 0;
            int sum = val1 + val2 + carry;
            carry = sum / 10;
            sum %= 10;
            current->next = new ListNode(sum);
            current = current->next;
            if (l1 != nullptr) l1 = l1->next;
            if (l2 != nullptr) l2 = l2->next;
        }
        if (carry > 0) {
            current->next = new ListNode(carry);
        }
        return l3->next;
    }
};
