/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
void insertAtTail(ListNode*& tail, int data){
    ListNode* temp=new ListNode(data);
    tail->next=temp;
    tail=temp;
}
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        ListNode *list3=new ListNode();
        ListNode *tail=list3;
        int data;
        while(list1!=NULL && list2!=NULL){
            if(list1->val==list2->val){
                data=list1->val;
                insertAtTail(tail,data);
                data=list2->val;
                insertAtTail(tail,data);
                list1=list1->next;
                list2=list2->next;
            }
            else if(list1->val>list2->val){
                data=list2->val;
                insertAtTail(tail,data);
                list2=list2->next;
            }
            else{
                data=list1->val;
                insertAtTail(tail,data);
                list1=list1->next;                
            }
        }
        while(list1!=NULL){
            data=list1->val;
                insertAtTail(tail,data);
                list1=list1->next; 
        }
        while(list2!=NULL){
            data=list2->val;
                insertAtTail(tail,data);
                list2=list2->next; 
        }
        return list3->next;
    }
};
