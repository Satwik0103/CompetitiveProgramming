// class Solution {
// public:
//     int equalPairs(vector<vector<int>>& grid) {
//         int m =grid.size();
//         int n =grid[0].size();
//         int totalRow=m+n;
//         set<long long int>s;
//         for(int i=0;i<n;i++){
//             long long int ans=0;
//             for(int j=0;j<m;j++){
//                 ans=ans*10+grid[i][j];
//             }
//             s.insert(ans);
//         }
//         for(int i=0;i<m;i++){
//             long long int ans=0;
//             for(int j=0;j<n;j++){
//                 ans=ans*10+grid[j][i];
//             }
//             s.insert(ans);
//         }
//         int size=s.size();
        
//         cout<<size;
//         if(size==1)
//         return totalRow;
//         return totalRow-size;

        
//     }
// };
class Solution {
public:
    int equalPairs(vector<vector<int>>& grid) {
        map<vector<int>, int> counter;
        int row = grid.size(), col = grid[0].size(), ans = 0;
        for (vector<int> row : grid) {
            counter[row] += 1;
        }
        for (int i = 0; i < row; i++) {
            vector<int> column_list = {};
            for (int j = 0; j < col; j++) {
                column_list.push_back(grid[j][i]);
            }
            ans += counter[column_list];
        }
        return ans;
    }
};
