/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    pair<bool,int> checkTree(TreeNode*root,int value){
           if(root==NULL){
            pair<bool,int>p =make_pair(true,value);
            return p;
        }
        pair<bool,int>leftAns=checkTree(root->left,value);
        pair<bool,int>rightAns=checkTree(root->right,value);
        pair<bool,int>ans;
        if(leftAns.first==true && rightAns.first==true){
            if(leftAns.second==value && rightAns.second==value){
        ans.first=true;
            }
            else{
                ans.first=false;
            }
        }
        else{
            ans.first=false;
        }
        ans.second=root->val;
        return ans;
    }
    bool isUnivalTree(TreeNode* root) {
          if(root==NULL){
              return true;
        }
        int value=root->val;
        return checkTree(root,value).first;
    }
        
};
