class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        vector<vector<int>> dist(n, vector<int>(n, INT_MAX));

        if (grid[0][0] != 0)
            return -1;

        dist[0][0] = 1;

        // row, col
        queue<pair<int, int>> Q;
        Q.emplace(0, 0); // start from 0, 0

        // 8 directionally
        int DIR[][2] = { {-1,-1}, {-1,0}, {-1,1}, {0,-1}, {0,1}, {1,-1}, {1,0}, {1,1} };

        while (!Q.empty()) {
            int r = Q.front().first;
            int c = Q.front().second;
            Q.pop();

            for (int i = 0; i < 8; i++) {
                int nr = r + DIR[i][0], nc = c + DIR[i][1];
                if (nr < 0 || nc < 0 || nr == n || nc == n || grid[nr][nc] != 0)
                    continue;
                    //Storing value
                if (dist[nr][nc] > dist[r][c] + 1) {
                    dist[nr][nc] = dist[r][c] + 1;
                    Q.emplace(nr, nc);
                }
            }
        }

        // If it's not possible to reach the end, return -1
        return dist[n-1][n-1] == INT_MAX ? - 1 : dist[n-1][n-1];
    }
};
