// class Solution {
// public:
//     string mergeAlternately(string word1, string word2) {
//         string res = "";
//         int i = 0;
//         int j = 0;
//         int k = 0;
//         while(i != word1.length() && j != word2.length()) {
//             if(k % 2 == 0) {
//                 res += word1[i++];
//                 k++;
//             } else {
//                 res += word2[j++];
//                 k++;
//             }
//         }
//         while(i != word1.length()) {
//             res += word1[i++];
//         }
//         while(j != word2.length()) {
//             res += word2[j++];
//         }
//         return res;
//     }
// };
class Solution {
public:
    string mergeAlternately(string w1, string w2) {
        string s;
        int i=0;
        while( i<w1.size() && i<w2.size()){
            s.push_back(w1[i]);
            s.push_back(w2[i]);
            i++;
        }
        if(i==w1.size()){
            for(int j = i;j<w2.size();j++) s.push_back(w2[j]);
        }
        else if(i==w2.size()){
            for(int j = i;j<w1.size();j++) s.push_back(w1[j]);
        }
        return s;
    }
};
