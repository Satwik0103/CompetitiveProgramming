# define MOD 1000000007
class Solution {
public:
int solveRec(int n,int k,int target){
    if(target<0)
    return 0;
    if(n==0 && target!=0)
    return 0;
    if(target==0 && n!=0)
    return 0;
    if(n==0 && target==0)
    return 1;
    int ans=0;
    for(int i=1;i<=k;i++){
        ans=(ans+solveRec(n-1,k,target-i))%MOD;
    }
    return ans;
}
int solveMem(int n,int k,int target,vector<vector<int>>&dp){
    if(target<0)
    return 0;
    if(n==0 && target!=0)
    return 0;
    if(target==0 && n!=0)
    return 0;
    if(n==0 && target==0)
    return 1;
    if(dp[n][target]!=-1)
    return dp[n][target];
    int ans=0;
    for(int i=1;i<=k;i++){
        ans=(ans+solveMem(n-1,k,target-i,dp))%MOD;
    }
    return dp[n][target]=ans;
}
int solveTab(int dice,int face , int target){
    vector<vector<int>>dp(dice+1,vector<int>(target+1,0));
    dp[0][0]=1;
    for(int d=1;d<=dice;d++){
        for(int t=1;t<=target;t++){
            int ans=0;
             for(int i=1;i<=face;i++){
                 if(t-i>=0)
            ans=(ans+dp[d-1][t-i])%MOD;
            }
            dp[d][t]=ans;
        }
    }
     return dp[dice][target];  
}
int solveSpaceOpt(int dice,int face , int target){
    vector<int>curr(target+1,0);
    vector<int>prev(target+1,0);
    prev[0]=1;
    for(int d=1;d<=dice;d++){
        for(int t=1;t<=target;t++){
            int ans=0;
             for(int i=1;i<=face;i++){
                 if(t-i>=0)
            ans=(ans+prev[t-i])%MOD;
            }
            curr[t]=ans;
        }
        prev=curr;
    }
     return prev[target];  
}
    int numRollsToTarget(int n, int k, int target) {
        vector<vector<int>>dp(n+1,vector<int>(target+1,-1));
       // int ans=solveRec(n,k,target);
      // int ans=solveMem(n,k,target,dp);
      // int ans=solveTab(n,k,target);
       int ans=solveSpaceOpt(n,k,target);
        return ans;
        
    }
};
