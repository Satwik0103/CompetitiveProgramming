/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
//     ListNode* removeNthFromEnd(ListNode* head, int n) {
//     ListNode* temp = head;
//     int length = 0;
//     while (temp != NULL) {
//         length++;
//         temp = temp->next;
//     }
//     if (length == n) {
//         ListNode* toDelete = head;
//         head = head->next;
//         delete toDelete;
//         return head;
//     }
//     int index = 0;
//     temp = head;
//     while (temp != NULL && index != length - n - 1) {
//         temp = temp->next;
//         index++;
//     }
//     ListNode* toDelete = temp->next;
//     temp->next = temp->next->next;
//     delete toDelete;
//     return head;
// }
ListNode* removeNthFromEnd(ListNode* head, int n) {
    ListNode* dummy = new ListNode(0, head);
    ListNode* slow = dummy;
    ListNode* fast = head;
    for (int i = 0; i < n; i++) {
        fast = fast->next;//fast ko n th node tk   legaye
    }
    while (fast != NULL) {
        slow = slow->next;
        fast = fast->next;
    }
    ListNode* toDelete = slow->next;
    slow->next = slow->next->next;
    if (head == toDelete) {
        head = slow->next;
    }
    delete toDelete;
    return head;
}


};
