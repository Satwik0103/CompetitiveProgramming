// class Solution {
// public:
//     vector<int> sortByBits(vector<int>& arr) {
//         // Count the number of 1s in each number and store in a map
//         map<int, int> mp;
//         vector<int> ans;

//         // Calculate the number of 1s in each number and store in the map
//         for (int i = 0; i < arr.size(); i++) {
//             int num = arr[i];
//             int cnt = 0;

//             // Count the number of 1s in 'num'
//             while (num > 0) {
//                 if (num & 1) {
//                     cnt++;
//                 }
//                 num >>= 1;
//             }

//             mp[arr[i]] = cnt;
//         }

//         // Sort the 'arr' based on the number of 1s using a custom comparator
//         sort(arr.begin(), arr.end(), [&](int a, int b) {
//             return mp[a] == mp[b] ? a < b : mp[a] < mp[b];
//         });

//         return arr;
//     }
// };

class Solution {
public:
    // Count the number of set bits (1s) in the binary representation of a number.
    static int countBits(int num) {
        int count = 0;
        
        while (num > 0) {
            count++;
            num &= (num - 1);  // Clear the least significant set bit.
        }
        
        return count;
    }
    
    static bool compare(int a, int b) {
        int bitCountA = countBits(a);
        int bitCountB = countBits(b);
        
        if (bitCountA == bitCountB) {
            return a < b;  // If set bit counts are equal, compare numerically.
        }
        
        return bitCountA < bitCountB;  // Sort by the set bit count in ascending order.
    }
    
    vector<int> sortByBits(vector<int>& arr) {
        sort(arr.begin(), arr.end(), compare);
        return arr;
    }
};
