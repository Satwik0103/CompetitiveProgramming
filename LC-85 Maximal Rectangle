class Solution {
public:
vector<int>nextSmallElement(vector<int>& arr,int n){
    stack<int>s;
    s.push(-1);
     vector<int>sol(n);
    for(int i=n-1;i>=0;i--){
        int ele=arr[i];
        while(s.top()!=-1 && arr[s.top()]>=ele){
            s.pop();
        }
        sol[i]=s.top();
        s.push(i);
    }
return sol;
}
vector<int> prevSmallerElement(vector<int> &arr, int n)
{
    // Write your code here.
    stack<int>s;
    s.push(-1);
    vector<int>sol(n);
    for(int i=0;i<n;i++){
        int ele=arr[i];
        while(s.top()!=-1&&arr[s.top()]>=ele){
            s.pop();
        }
        sol[i]=s.top();
        s.push(i);
        
    }
    return sol;
}
int largestResctangleArea(vector<int>& histogram){
    int n=histogram.size();
    vector<int>next(n);
    next=nextSmallElement(histogram,n);
    vector<int>prev(n);
    prev=prevSmallerElement(histogram,n);
    int area=INT_MIN;
    for(int i=0;i<n;i++){
        int len=histogram[i];
        if(next[i]==-1)
        next[i]=n;
        int bre=next[i]-prev[i]-1;
        int newArea=len*bre;
        area=max(area,newArea);
    }
    return area;
}
    int maximalRectangle(vector<vector<char>>& matrix) {
        int maxi=INT_MIN;
       vector<int>histogram(matrix[0].size(),0);
       for(int i=0;i<matrix.size();i++){
           for(int j=0;j<matrix[0].size();j++){
               if(matrix[i][j]=='1')
               histogram[j]+=1;
               else
               histogram[j]=0;
           }
            maxi=max(maxi,largestResctangleArea(histogram));
       }  
       return maxi;
    }
};
