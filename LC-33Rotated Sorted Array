// class Solution {
// public:
//     int search(vector<int>& nums, int target) {
//         int start=0;
//         int end=nums.size()-1;
//         int mid=(start+(end-start))/2;
//         while(start<end){
//         if(nums[mid]==target)
//         return mid;
//         //In the left side
//         else if(nums[mid]>nums[start]){
//             if(nums[mid]<target || target<nums[start])
//             start=mid+1;
//             else{
//                 end=mid-1;
//             }
//         }
//         //In Right Side
//         else {
//             if(nums[mid]<target || target>nums[start])
//             end=mid-1;
//             else{
//                 start=mid+1;
//             }
//         }
//         }
//         return 0;
//     }
// };

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int start = 0;
        int end = nums.size() - 1;
        while (start <= end) {
            int mid = (start + end) / 2;
            if (nums[mid] == target) {
                return mid;
            } else if (nums[mid] >= nums[start]) {
                if (target >= nums[start] && target < nums[mid]) {
                    end = mid - 1;
                } else {
                    start = mid + 1;
                }
            } else {
                if (target > nums[mid] && target <= nums[end]) {
                    start = mid + 1;
                } else {
                    end = mid - 1;
                }
            }
        }
        return -1;
    }
};
