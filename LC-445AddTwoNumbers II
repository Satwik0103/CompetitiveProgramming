// /**
//  * Definition for singly-linked list.
//  * struct ListNode {
//  *     int val;
//  *     ListNode *next;
//  *     ListNode() : val(0), next(nullptr) {}
//  *     ListNode(int x) : val(x), next(nullptr) {}
//  *     ListNode(int x, ListNode *next) : val(x), next(next) {}
//  * };
//  */
// class Solution {
// public:
//     ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
//     long long int s1 = 0;
//     long long int s2 = 0;
//     while (l1 != NULL) {
//         s1 = s1 * 10 + l1->val;
//         l1 = l1->next;
//     }
//     while (l2 != NULL) {
//         s2 = s2 * 10 + l2->val;
//         l2 = l2->next;
//     }
//     long long int sum = s1 + s2;
//     ListNode* result = nullptr;
//     while (sum != 0) {
//         int digit = sum % 10;
//         ListNode* newNode = new ListNode(digit);
//         newNode->next = result;
//         result = newNode;
//         sum = sum / 10;
//     }
//     if (result == nullptr) {
//         result = new ListNode(0);
//     }
//     return result;
// }
// };
class Solution {
public:
    ListNode* StackAddition(ListNode* l1, ListNode* l2) {
        stack<int> stack1, stack2;

        while (l1 != nullptr) {
            stack1.push(l1->val);
            l1 = l1->next;
        }

        while (l2 != nullptr) {
            stack2.push(l2->val);
            l2 = l2->next;
        }

        ListNode* result = nullptr;
        int carry = 0;

        while (!stack1.empty() || !stack2.empty() || carry != 0) {
            int digit1 = !stack1.empty() ? stack1.top() : 0;
            int digit2 = !stack2.empty() ? stack2.top() : 0;

            int sum = digit1 + digit2 + carry;
            int digit = sum % 10;
            carry = sum / 10;

            ListNode* newNode = new ListNode(digit);
            newNode->next = result;
            result = newNode;

            if (!stack1.empty())
                stack1.pop();
            if (!stack2.empty())
                stack2.pop();
        }

        return result;
    }

    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* ans = StackAddition(l1, l2);
        return ans;
    }
};
