// class Solution {
// public:
//     vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
//         int n1=nums1.size();
//         int n2=nums2.size();
//         int i=0;
//         int j=0;
//         set<int>ans;
//         sort(nums1.begin(),nums1.end());
//         sort(nums2.begin(),nums2.end());
//         while(i<n1&&j<n2){
//             if(nums1[i]==nums2[j])
//             {
//                 ans.insert(nums1[i]);
//                 i++;
//                 j++;
//             }
//             else if (nums1[i]<nums2[j]){
//                 i++;
//             }
//             else{
//                 j++;
//             }
//         }
//       vector<int> res(ans.begin(), ans.end());
//         return res;
//     }
// };

class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        std::unordered_set<int> set1(nums1.begin(), nums1.end());
        std::unordered_set<int> set2(nums2.begin(), nums2.end());

        std::vector<int> result;
        for (const auto& num : set1) {
            if (set2.find(num) != set2.end()) {
                result.push_back(num);
            }
        }

        return result;
    }
};
