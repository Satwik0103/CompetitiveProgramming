#define inf 1000000000
class Solution {
public:
    int n, coin[20], dp[10005];
    
    int solve(int w) {
        if(w == 0) return 0;
        if(dp[w] != -1) return dp[w];

        int ans = inf;
        for(int i=0; i<n; i++) {
            if(w - coin[i] >= 0) ans = min(ans, 1 + solve(w - coin[i])); 
        }
        return dp[w] = ans;
    }
    
    int coinChange(vector<int>& coins, int amount) {
        n = coins.size();
        for(int i=0; i<n; i++) coin[i] = coins[i];
        for(int i=0; i<10005; i++) dp[i] = -1;
        int ans = solve(amount);
        if(ans == inf) return -1;
        else return ans;
    }
};


//----------------------------------------------------------------------

class Solution {
public:
   int solveDp(vector<int>&coins,int amount,vector<int>&dp){
   int i;
    int minVal=INT_MAX;

    if(amount==0)
    return 0;
    
    if(amount<0)
    return INT_MAX;

    if(dp[amount]!=-1)
    return dp[amount];
    
    for(i=0;i<coins.size();i++){
        int ans=0;
        ans=solveDp(coins,amount-coins[i],dp);  
        if(ans!=INT_MAX)
            minVal=min(ans+1,minVal);  
        }
    dp[amount]=minVal;
    return dp[amount];
    }

    int solveTab(vector<int>&coins,int amount){
        vector<int>dp(amount+1,INT_MAX);
        dp[0]=0;
        for(int i=1;i<=amount;i++){
            for(int j=0;j<coins.size();j++){
                if(i-coins[j]>=0 && dp[i-coins[j]]!=INT_MAX )
                dp[i]=min(dp[i],1+dp[i-coins[j]]); 
            }
        }
        return dp[amount];
        }

    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        //Memoization
        // vector<int>dp(amount+1,-1);
        // int ans=solveDp(coins,amount,dp);
        
        //Tabulation
        int ans=solveTab(coins,amount);
        
        if(ans==INT_MAX)
        ans=-1; 
        return ans;
    }
};
