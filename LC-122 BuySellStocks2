class Solution {
public:
    int solveRec(vector<int>& prices,int index,int buyFlag){
        if(index>prices.size()-1)
        return 0;
        if(buyFlag==0){
            //If buy
            int a=-prices[index]+solveRec(prices,index+1,1);
            //If not buy
            int b=0+solveRec(prices,index+1,0);
            return max(a,b);
        }
        else{
            //If sell
            int a=prices[index]+solveRec(prices,index+1,0);
            //If not sell
            int b=0+solveRec(prices,index+1,1);
            return max(a,b);
        }
    }

      int solveMem(vector<int>& prices,int index,int buyFlag,vector<vector<int>>&dp){
        if(index>prices.size()-1)
        return 0;
        if(dp[index][buyFlag]!=-1)
        return dp[index][buyFlag];
        if(buyFlag==0){
            //If buy
            int a=-prices[index]+solveMem(prices,index+1,1,dp);
            //If not buy
            int b=0+solveMem(prices,index+1,0,dp);
            return dp[index][buyFlag]=max(a,b);
        }
        else{
            //If sell
            int a=prices[index]+solveMem(prices,index+1,0,dp);
            //If not sell
            int b=0+solveMem(prices,index+1,1,dp);
            return dp[index][buyFlag]=max(a,b);
        }
    }

     int solveTab(vector<int>& prices){
         int n=prices.size();
        vector<vector<int>> dp(n+1,vector<int>(2,0));
        for(int index=n-1;index>=0;index--){
            for(int buyFlag=0;buyFlag<=1;buyFlag++){
                  if(buyFlag==0){
            //If buy
            int a=-prices[index]+dp[index+1][1];
            //If not buy
            int b=0+dp[index+1][0];
             dp[index][buyFlag]=max(a,b);
        }
        else{
            //If sell
            int a=prices[index]+dp[index+1][0];
            //If not sell
            int b=0+dp[index+1][1];
             dp[index][buyFlag]=max(a,b);
        }

            }
        }
      return dp[0][0];
    }
    int solveSpaceOpt(vector<int>& prices){
         int n=prices.size();
         vector<int>curr(2,0);
         vector<int>next(2,0);
      //  vector<vector<int>> dp(n+1,vector<int>(2,0));
        for(int index=n-1;index>=0;index--){
            for(int buyFlag=0;buyFlag<=1;buyFlag++){
                  if(buyFlag==0){
            //If buy
            int a=-prices[index]+next[1];
            //If not buy
            int b=0+next[0];
             curr[buyFlag]=max(a,b);
        }
        else{
            //If sell
            int a=prices[index]+next[0];
            //If not sell
            int b=0+next[1];
             curr[buyFlag]=max(a,b);
        }

            }
            next=curr;
        }
      return next[0];
    }

    int maxProfit(vector<int>& prices) {
        //int ans=solveRec(prices,0,0);
        int n=prices.size();
       // vector<vector<int>> dp(n+1,vector<int>(2,-1));
         //int ans=solveMem(prices,0,0,dp);
         //int ans=solveTab(prices);
         int ans=solveSpaceOpt(prices);
        return ans;
    }
};
