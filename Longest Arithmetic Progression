//{ Driver Code Starts
//Initial template for C++

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function template for C++

class Solution{   
public:

    int find(int val,int C[],int n){
        // cout<<"Here"<<val<<endl;
        for(int k=0;k<n;k++){
            if(val==C[k]){
          //  cout<<val<<"Index"<<k<<endl;
             return k;
             }
        }
        return -1;
    }
    int solveRec(int A[],int n,int index,int d){
        int C[n];
        for (int k = 0; k < n; k++) {
        C[k] = A[k];
        }
        int res= -1;
       //  cout<<"Yee"<<index<<d<<endl;
        int a=0,b=0;
        res=find(A[index]+d,C,n);
         //cout<<"rbb"<<res<<endl;
        if(res!=-1){
           // cout<<"Inside";
        a=1+solveRec(A,n,res,d);
            //cout<<"vdd"<<a<<endl;
        }
        if(index+1<n){
            //cout<<"idhr bhai";
        b=solveRec(A,n,index+1,A[index+1]-A[index]);
        //cout<<"sjvjdsv"<<b<<endl;
        }
       
        int ans= max(a,b);
         //cout<<"hjdgjd"<<a<<b<<ans<<endl;
        //cout<<ans<<endl;
        return ans;
    }
     int solveMem(int A[],int n,int index,int d,unordered_map<int,int>dp[]){
        int C[n];
        if(dp[index].count(d))
        return dp[index][d];
        for (int k = 0; k < n; k++) {
        C[k] = A[k];
        }
        int res= -1;
       //  cout<<"Yee"<<index<<d<<endl;
        int a=0,b=0;
        res=find(A[index]+d,C,n);
         //cout<<"rbb"<<res<<endl;
        if(res!=-1){
           // cout<<"Inside";
        a=1+solveRec(A,n,res,d);
            //cout<<"vdd"<<a<<endl;
        }
        if(index+1<n){
            //cout<<"idhr bhai";
        b=solveMem(A,n,index+1,A[index+1]-A[index],dp);
        //cout<<"sjvjdsv"<<b<<endl;
        }
       
        int ans= max(a,b);
         //cout<<"hjdgjd"<<a<<b<<ans<<endl;
        //cout<<ans<<endl;
        dp[index][d]=ans;
        return ans;
    }
    int lengthOfLongestAP(int A[], int n) {
        //bruteforce
        if(n<=2)
        return n;
        //for(i=1;i<n;i++){
         //   for(j=i;j<n;j++){
                //d=a[i]-a[j];
                //finding(a[i]+d)in array
                //then applying recursion to solve furtherreturning the ans
           // }
        //}
        //return solve(A[],n);
        
        
        int ans=0;
        unordered_map<int,int>dp[n+1];
        // code here
        //   if(n<=2)
        // return n;
      //int ans=2+solveRec(A,n,1,A[1]-A[0]);
     // int ans=2+solveMem(A,n,1,A[1]-A[0],dp);
     
     for(int i=1;i<n;i++){
         for(int j=0;j<i;j++){
             int d=A[i]-A[j];
             int cnt=1;
              if(dp[j].count(d))
                cnt= dp[j][d];
            dp[i][d]=1+cnt;
            ans=max(ans,dp[i][d]);
         }
     }
     
      return ans;
    }
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int A[n];
        for (int i = 0; i < n; i++) {
            cin >> A[i];
        }
        Solution ob;
        auto ans = ob.lengthOfLongestAP(A, n);
        cout << ans << "\n";
    }
    return 0;
}
// } Driver Code Ends
