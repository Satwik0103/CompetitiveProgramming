// class Solution {
// public:
//     vector<int> majorityElement(vector<int>& nums) {
//         map<int,int>mp;
//         vector<int>ans;
//         for(int i=0;i<nums.size();i++){
//             mp[nums[i]]++;
//         }
//         for(auto j:mp){
//             if(j.second>nums.size()/3){
//                 ans.push_back(j.first);
//             }
//         }
//         return ans;
        
//     }
// };

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        //Max no of elements cannot exceed 2  thats why we have 2 candidates
        int candidate1 = INT_MIN, candidate2 = INT_MIN;
        int count1 = 0, count2 = 0;

        // Step 1: Find potential candidates for majority elements
        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            } else if (count1 == 0) {
                candidate1 = num;
                count1 = 1;
            } else if (count2 == 0) {
                candidate2 = num;
                count2 = 1;
            } else {
                count1--;
                count2--;
            }
        }

        // Step 2: Count the occurrences of the potential candidates
        count1 = 0;
        count2 = 0;
        for (int num : nums) {
            if (num == candidate1) {
                count1++;
            } else if (num == candidate2) {
                count2++;
            }
        }

        vector<int> result;
        if (count1 > nums.size() / 3) {
            result.push_back(candidate1);
        }
        if (count2 > nums.size() / 3) {
            result.push_back(candidate2);
        }

        return result;
    }
};
